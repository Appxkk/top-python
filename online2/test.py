def visualize_heap(arr, heap_size=None):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞ (–ø–æ —É—Ä–æ–≤–Ω—è–º)"""
    import math
    if heap_size is None:
        heap_size = len(arr)
    levels = int(math.log2(heap_size)) + 1 if heap_size > 0 else 0
    index = 0
    for level in range(levels):
        count = 2 ** level
        line = arr[index:index+count]
        print(" " * (2 ** (levels - level)), *line)
        index += count
        if index >= heap_size:
            break
    print("-" * 40)


def heapify(arr, n, i, ascending, stats):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –∫—É—á–∏"""
    stats["iterations"] += 1  # –°—á–∏—Ç–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é (–≤—ã–∑–æ–≤ heapify)
    largest_or_smallest = i
    left = 2 * i + 1
    right = 2 * i + 2

    # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π/–Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–µ–¥–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–º–∫–æ–≤
    if ascending:
        if left < n and arr[left] > arr[largest_or_smallest]:
            largest_or_smallest = left
        if right < n and arr[right] > arr[largest_or_smallest]:
            largest_or_smallest = right
    else:
        if left < n and arr[left] < arr[largest_or_smallest]:
            largest_or_smallest = left
        if right < n and arr[right] < arr[largest_or_smallest]:
            largest_or_smallest = right

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞—Ä—É—à–∞—é—â–∏–π —Å–≤–æ–π—Å—Ç–≤–æ –∫—É—á–∏ ‚Äî –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
    if largest_or_smallest != i:
        arr[i], arr[largest_or_smallest] = arr[largest_or_smallest], arr[i]
        stats["swaps"] += 1
        print(f"–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞: {arr[i]} <--> {arr[largest_or_smallest]}")
        visualize_heap(arr, n)  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        heapify(arr, n, largest_or_smallest, ascending, stats)


def heap_sort(arr, ascending=True):
    n = len(arr)
    stats = {"swaps": 0, "iterations": 0}

    print("üîπ –°—Ç—Ä–æ–∏–º –∫—É—á—É:")
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i, ascending, stats)

    print("üîπ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:")
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        stats["swaps"] += 1
        print(f"–°—Ç–∞–≤–∏–º {arr[i]} –Ω–∞ –º–µ—Å—Ç–æ, –º–µ–Ω—è–µ–º —Å {arr[0]}")
        visualize_heap(arr, i)
        heapify(arr, i, 0, ascending, stats)

    return arr, stats["iterations"], stats["swaps"]


numbers = list(map(int, input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").split()))
order = input("asc - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é / desc - –ø–æ —É–±—ã–≤–∞–Ω–∏—é: ").strip().lower()
ascending = True if order == 'asc' else False

sorted_list, iterations, swaps = heap_sort(numbers, ascending)

print("‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:", sorted_list)
print("üìä –ö–æ–ª-–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (–≤—ã–∑–æ–≤–æ–≤ heapify):", iterations)
print("üîÅ –ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫:", swaps)
